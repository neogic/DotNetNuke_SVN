<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="SecondaryPackages" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- This file reponsible to create
		1. StarterKit
		2. Documents
		3. Deploy
		
		   Note: Packages are created only in case of Forced build.
	-->
	
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" />
	<Import Project="AT.MSBuild.Tasks.Targets" />
	<UsingTask AssemblyFile="$(MSBuildCommunityTasksLib)" TaskName="MSBuild.Community.Tasks.IIS.WebDirectoryCreate" />

	<PropertyGroup>
		<DefaultVersion>05.00.00.00000</DefaultVersion>
		<ProjectSecName>DotNetNuke_5_Maintenance</ProjectSecName>
		<PackageBaseUrl>http://dnn-build/CCNet_Packages/$(ProjectSecName)/</PackageBaseUrl>
		<!-- Name of the directory where the packages are built (relatieve to working directory) -->
		<UpLevels>..\..\..\..\..\</UpLevels>
		<PackageDirectory>$(UpLevels)CCNet_Packages</PackageDirectory>
		<TestBasicPath>$(UpLevels)CCNet_TestInstalls\</TestBasicPath>
		<PrePackagePath>PredefinePackages\</PrePackagePath>
		<SourceFolder>..\..\</SourceFolder>
		<SourceCompletePath>$(MSBuildProjectDirectory)\$(SourceFolder)</SourceCompletePath>
		<!--SourceGear's Vault related properties-->
		<VaultApp>$(ProgramFilesDir)\sourcegear\Fortress client\vault.exe</VaultApp>
		<VaultCommonOptions>$(SGVaultOptions) Core_Development </VaultCommonOptions>
		<VaultRepository> $/DotNetNuke_5_Maintenance</VaultRepository>
		<VaultLegacyCommonOptions>$(SGVaultOptions) Core_Legacy </VaultLegacyCommonOptions>
	</PropertyGroup>

	<!-- Import Include/Exclude file lists from other file. -->
	<Import Project="FileList.msbuild" />

	<Target Name="VersionCheck">
		<!-- This target is responsible to read version from AssemblyInfo file (note last AutoIncrementVersion=False) -->
		<IncrementBuildNumber FilePath="$(SourceCompletePath)Library\AssemblyInfo.vb" AutoIncrementVersion="false">
			<Output TaskParameter="BuildVersion" PropertyName="BuildVersion">
			</Output>
			<Output TaskParameter="ReleaseVersion" PropertyName="ReleaseVersion">
			</Output>
		</IncrementBuildNumber>
		<CreateProperty Condition="'$(VersionType)'=='Release'" Value="$(ReleaseVersion).Release">
			<Output TaskParameter="Value" PropertyName="BuildVersion" />
		</CreateProperty>
		<Message Text="Zip Version : $(BuildVersion)" />
	</Target>

	<!-- The packages will only be created on a forced build !! -->
	<Target Name="SecondaryPackages" DependsOnTargets="VersionCheck" Condition="'$(CCNetBuildCondition)'== 'ForceBuild'">

		<GetAbsolutePath RootPath="$(MSBuildProjectDirectory)" RelativePath="$(PackageDirectory)">
			<Output TaskParameter="AbsolutePath" PropertyName="PackageDirectory" />
		</GetAbsolutePath>

		<MakeDir Directories="$(PackageDirectory)\$(ProjectSecName)\$(BuildVersion)" />
		<MakeDir Directories="$(PrePackagePath)Starter Kit" />
		<MakeDir Directories="$(PrePackagePath)Deploy" />
		<MakeDir Directories="$(PrePackagePath)Docs" />

		<!--Creating Starter kit vsi-->
		<ShellCommand Command="$(VaultApp) GETWILDCARD $(VaultCommonOptions) -NoRecursive -destpath &quot;$(PrePackagePath)Starter Kit&quot; &quot;$/Starter Kit/&quot; *.*" WaitCompletion="True" />
		<Copy SourceFiles="$(PackageDirectory)\$(ProjectSecName)\$(BuildVersion)\DotNetNuke_Community_$(BuildVersion)_Install.zip" DestinationFiles="$(PrePackagePath)Starter Kit\DotNetNuke.zip" />

		<!-- Need to create a new Item collection dynamically since zipfile (DotNetNuke.zip) for starter kit was created -->
		<CreateItem Include="$(PrePackagePath)Starter Kit\*.zip; $(PrePackagePath)Starter Kit\DotNetNuke.vscontent">
			<Output TaskParameter="Include" ItemName="StarterKitPackage" />
		</CreateItem>

		<Zip Files="@(StarterKitPackage)" WorkingDirectory="$(PrePackagePath)Starter Kit\"
			 ZipFileName="$(PackageDirectory)\$(ProjectSecName)\$(BuildVersion)\DotNetNuke_Community_$(BuildVersion)_StarterKit.vsi" />

			 
		<!-- Creating Deploy Package -->
		<CreateItem Include="$(SourceCompletePath)Website\**">
			<Output TaskParameter="Include" ItemName="DotNetNukeWebSource" />
		</CreateItem>

		<ShellCommand Command="$(VaultApp) GETWILDCARD $(VaultLegacyCommonOptions) -NoRecursive -destpath &quot;$(PrePackagePath)Deploy&quot; &quot;$/Deploy/&quot; *.*" WaitCompletion="True" />
		<Copy SourceFiles="@(DotNetNukeWebSource)" DestinationFiles="@(DotNetNukeWebSource->'$(SourceCompletePath)Deploy\DotNetNuke\%(RecursiveDir)%(Filename)%(Extension)')" />

		<CreateItem Include="$(SourceCompletePath)Deploy\**\*.*">
			<Output TaskParameter="Include" ItemName="DeploySource" />
		</CreateItem>
		
		<Zip Files="@(DeploySource)" WorkingDirectory="$(SourceCompletePath)Deploy\"
			 ZipFileName="$(PackageDirectory)\$(ProjectSecName)\$(BuildVersion)\DotNetNuke_Community_$(BuildVersion)_Deploy.zip" />
		

		<!-- Creating Docs Zip -->
		<ShellCommand Command="$(VaultApp) GETWILDCARD $(VaultLegacyCommonOptions) -NoRecursive -destpath &quot;$(PrePackagePath)Docs&quot; &quot;$/DotNetNuke_Documentation/Documentation/Public/PDF/&quot; *.*" WaitCompletion="True" />

		<!-- Need to create a new Item collection dynamically since zipfile (DotNetNuke.zip) for starter kit was created -->
		<CreateItem Include="$(PrePackagePath)Docs\*.*">
			<Output TaskParameter="Include" ItemName="DocsPackage" />
		</CreateItem>

		<Zip Files="@(DocsPackage)" WorkingDirectory="$(PrePackagePath)Docs\"
			 ZipFileName="$(PackageDirectory)\$(ProjectSecName)\$(BuildVersion)\DotNetNuke_Community_$(BuildVersion)_Docs.zip" />

		<!-- Creating Symbols Package Zip --><!--
		--><!-- Need to create a new Item collection dynamically to pick up the generated .pdb files and .xml files --><!--
		<CreateItem Include="$(SourceCompletePath)website\bin\**\*.pdb; $(SourceCompletePath)website\bin\**\*.xml">
			<Output TaskParameter="Include" ItemName="SymbolsPackageResources" />
		</CreateItem>

		<Zip Files="@(SymbolsPackageResources)" WorkingDirectory="$(SourceCompletePath)Website\"
			 ZipFileName="$(SourceCompletePath)symbols\Resources.zip" />

 		<CreateItem Include="$(SourceCompletePath)Symbols\*.*;">
			<Output TaskParameter="Include" ItemName="SymbolsPackage" />
		</CreateItem>

		<Zip Files="@(SymbolsPackage)" WorkingDirectory="$(SourceCompletePath)Symbols\"
			 ZipFileName="$(PackageDirectory)\$(ProjectSecName)\$(BuildVersion)\DotNetNuke_Community_$(BuildVersion)_Symbols.zip" />-->
			 
		<Message Importance="high" Text="PackageUrl:$(PackageBaseUrl)$(BuildVersion)/DotNetNuke_Community_$(BuildVersion)_StarterKit.vsi" />
		<Message Importance="high" Text="PackageUrl:$(PackageBaseUrl)$(BuildVersion)/DotNetNuke_Community_$(BuildVersion)_Deploy.zip" />
		<Message Importance="high" Text="PackageUrl:$(PackageBaseUrl)$(BuildVersion)/DotNetNuke_Community_$(BuildVersion)_Docs.zip" />
		<Message Importance="high" Text="PackageUrl:$(PackageBaseUrl)$(BuildVersion)/DotNetNuke_Community_$(BuildVersion)_Symbols.zip" />
  </Target>
</Project>